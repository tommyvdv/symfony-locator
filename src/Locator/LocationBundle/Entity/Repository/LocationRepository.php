<?php

namespace Locator\LocationBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;



/**
 * LocationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LocationRepository extends EntityRepository
{
    public function getAll($limit = null, $latLng = null, $scalar = false)
    {
        //var_dump(array($lat,$lng));
        list($lat, $lng, $distance) = array($latLng['lat'], $latLng['lng'], $latLng['distance']);

        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('LocatorLocationBundle:Location', 'l');
        $rsm->addScalarResult('distance', 'distance');

        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
        $emConfig->addCustomDatetimeFunction('COS', 'DoctrineExtensions\Query\Mysql\Cos');
        $emConfig->addCustomDatetimeFunction('ACOS', 'DoctrineExtensions\Query\Mysql\Acos');
        $emConfig->addCustomDatetimeFunction('PI', 'DoctrineExtensions\Query\Mysql\Pi');

        $sql = 'SELECT l.*';

        if($lat && $lng)
            $sql.= ', ((ACOS(SIN(:lat * :pi / 180) * SIN(l.latitude * :pi / 180) + COS(:lat * :pi / 180) * COS(l.latitude * :pi / 180) * COS((:lng - l.longitude) * :pi / 180)) * 180 / :pi) * 60 * 1.1515) AS distance';

        $sql.= ' FROM locations AS l';

        if($lat && $lng) {
            if ($distance)
                $sql.= ' HAVING distance <= :distance';

            $sql.= ' ORDER BY distance ASC';
        }

        if($lat && $lng && !$distance && is_null($limit))
            $limit = 10;

        if (false === is_null($limit))
            $sql.= ' LIMIT 0,:limit';

        $qb = $this->getEntityManager()
                    ->createNativeQuery($sql, $rsm)
                    ->setParameters(
                        array(
                            'lat' => $lat,
                            'lng' => $lng,
                            'pi' => pi(),
                            'distance' => $distance,
                            'limit' => $limit
                        )
                    );

        if($scalar)
            $result = $qb->getScalarResult();
        else
            $result = $qb->getResult();

        if ($lat && $lng) {
            foreach ($result as $key => $row) {
                //var_dump($row[0]->setDistance($row['distance'])); exit;
                $result[$key] = $row[0]->setDistance($row['distance']);
            }
        } else {
            if(!$scalar)
                foreach ($result as $key => $row) {
                    $result[$key] = $row[0];
                }
        }

        //var_dump($result); exit;

        return $result;

        /*
        $rsm = new ResultSetMappingBuilder($this->getEntityManager());
        $rsm->addRootEntityFromClassMetadata('LocatorLocationBundle:Location', 'l');

        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('SIN', 'DoctrineExtensions\Query\Mysql\Sin');
        $emConfig->addCustomDatetimeFunction('COS', 'DoctrineExtensions\Query\Mysql\Cos');
        $emConfig->addCustomDatetimeFunction('ACOS', 'DoctrineExtensions\Query\Mysql\Acos');
        $emConfig->addCustomDatetimeFunction('PI', 'DoctrineExtensions\Query\Mysql\Pi');


        $qb = $this->getEntityManager()
                    ->createQueryBuilder()
                    ->select(
                        'l.id',
                        'l.street',
                        'l.city',
                        'l.latitude',
                        'l.longitude',
                        'l.is_open_in_weekends',
                        'l.has_support_desk',
                        'l.created',
                        'l.updated');

        if($lat && $lng)
        {
            $qb->addSelect('((ACOS(SIN(:lat * :pi / 180) * SIN(l.latitude * :pi / 180) + COS(:lat * :pi / 180) * COS(l.latitude * :pi / 180) * COS((:lng - l.longitude) * :pi / 180)) * 180 / :pi) * 60 * 1.1515) distance')
                ->setParameters(
                    array(
                        'lat' => $lat,
                        'lng' => $lng,
                        'pi' => pi()
                    )
                );
        }

        $qb->from('LocatorLocationBundle:Location', 'l')
            ->addOrderBy('l.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        $result = $qb->getQuery()
                     ->getResult();

        var_dump($result); exit;

        return $result;
        */
    }

    /*


        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder()
                   ->select('l')
                   ->addSelect('(l.latitude + l.longitude) AS l_woot')
                   ->from('LocatorLocationBundle:Location', 'l');
                   //->addOrderBy('location.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        $result = $qb->getQuery()->getResult();

        var_dump($result);exit;

        return $result;
        */
}
